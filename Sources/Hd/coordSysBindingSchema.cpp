//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "Hd/coordSysBindingSchema.h"

#include "Hd/retainedDataSource.h"

#include "Trace/traceImpl.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(HdCoordSysBindingSchemaTokens, HD_COORD_SYS_BINDING_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

TfTokenVector HdCoordSysBindingSchema::GetCoordSysBindingNames() const
{
  if (_container) {
    return _container->GetNames();
  }
  else {
    return {};
  }
}

HdPathDataSourceHandle HdCoordSysBindingSchema::GetCoordSysBinding(const TfToken &name) const
{
  return _GetTypedDataSource<HdPathDataSource>(name);
}

/*static*/
HdContainerDataSourceHandle HdCoordSysBindingSchema::BuildRetained(
    const size_t count, const TfToken *const names, const HdDataSourceBaseHandle *const values)
{
  return HdRetainedContainerDataSource::New(count, names, values);
}

/*static*/
HdCoordSysBindingSchema HdCoordSysBindingSchema::GetFromParent(
    const HdContainerDataSourceHandle &fromParentContainer)
{
  return HdCoordSysBindingSchema(fromParentContainer ?
                                     HdContainerDataSource::Cast(fromParentContainer->Get(
                                         HdCoordSysBindingSchemaTokens->coordSysBinding)) :
                                     nullptr);
}

/*static*/
const TfToken &HdCoordSysBindingSchema::GetSchemaToken()
{
  return HdCoordSysBindingSchemaTokens->coordSysBinding;
}

/*static*/
const HdDataSourceLocator &HdCoordSysBindingSchema::GetDefaultLocator()
{
  static const HdDataSourceLocator locator(GetSchemaToken());
  return locator;
}

PXR_NAMESPACE_CLOSE_SCOPE
