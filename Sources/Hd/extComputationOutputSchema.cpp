//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "Hd/extComputationOutputSchema.h"

#include "Hd/retainedDataSource.h"

#include "Trace/traceImpl.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(HdExtComputationOutputSchemaTokens,
                        HD_EXT_COMPUTATION_OUTPUT_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdTokenDataSourceHandle HdExtComputationOutputSchema::GetName() const
{
  return _GetTypedDataSource<HdTokenDataSource>(HdExtComputationOutputSchemaTokens->name);
}

HdTupleTypeDataSourceHandle HdExtComputationOutputSchema::GetValueType() const
{
  return _GetTypedDataSource<HdTupleTypeDataSource>(HdExtComputationOutputSchemaTokens->valueType);
}

/*static*/
HdContainerDataSourceHandle HdExtComputationOutputSchema::BuildRetained(
    const HdTokenDataSourceHandle &name, const HdTupleTypeDataSourceHandle &valueType)
{
  TfToken _names[2];
  HdDataSourceBaseHandle _values[2];

  size_t _count = 0;

  if (name) {
    _names[_count] = HdExtComputationOutputSchemaTokens->name;
    _values[_count++] = name;
  }

  if (valueType) {
    _names[_count] = HdExtComputationOutputSchemaTokens->valueType;
    _values[_count++] = valueType;
  }
  return HdRetainedContainerDataSource::New(_count, _names, _values);
}

HdExtComputationOutputSchema::Builder &HdExtComputationOutputSchema::Builder::SetName(
    const HdTokenDataSourceHandle &name)
{
  _name = name;
  return *this;
}

HdExtComputationOutputSchema::Builder &HdExtComputationOutputSchema::Builder::SetValueType(
    const HdTupleTypeDataSourceHandle &valueType)
{
  _valueType = valueType;
  return *this;
}

HdContainerDataSourceHandle HdExtComputationOutputSchema::Builder::Build()
{
  return HdExtComputationOutputSchema::BuildRetained(_name, _valueType);
}

PXR_NAMESPACE_CLOSE_SCOPE
