//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "Hd/coordSysSchema.h"

#include "Hd/retainedDataSource.h"

#include "Trace/traceImpl.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(HdCoordSysSchemaTokens, HD_COORD_SYS_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdTokenDataSourceHandle HdCoordSysSchema::GetName() const
{
  return _GetTypedDataSource<HdTokenDataSource>(HdCoordSysSchemaTokens->name);
}

/*static*/
HdContainerDataSourceHandle HdCoordSysSchema::BuildRetained(const HdTokenDataSourceHandle &name)
{
  TfToken _names[1];
  HdDataSourceBaseHandle _values[1];

  size_t _count = 0;

  if (name) {
    _names[_count] = HdCoordSysSchemaTokens->name;
    _values[_count++] = name;
  }
  return HdRetainedContainerDataSource::New(_count, _names, _values);
}

HdCoordSysSchema::Builder &HdCoordSysSchema::Builder::SetName(const HdTokenDataSourceHandle &name)
{
  _name = name;
  return *this;
}

HdContainerDataSourceHandle HdCoordSysSchema::Builder::Build()
{
  return HdCoordSysSchema::BuildRetained(_name);
}

/*static*/
HdCoordSysSchema HdCoordSysSchema::GetFromParent(
    const HdContainerDataSourceHandle &fromParentContainer)
{
  return HdCoordSysSchema(
      fromParentContainer ?
          HdContainerDataSource::Cast(fromParentContainer->Get(HdCoordSysSchemaTokens->coordSys)) :
          nullptr);
}

/*static*/
const TfToken &HdCoordSysSchema::GetSchemaToken()
{
  return HdCoordSysSchemaTokens->coordSys;
}

/*static*/
const HdDataSourceLocator &HdCoordSysSchema::GetDefaultLocator()
{
  static const HdDataSourceLocator locator(GetSchemaToken());
  return locator;
}

PXR_NAMESPACE_CLOSE_SCOPE
