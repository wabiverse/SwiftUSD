//
// Copyright 2023 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdSchemaDefs.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "UsdImaging/directMaterialBindingsSchema.h"

#include "Hd/retainedDataSource.h"

#include "Trace/traceImpl.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(UsdImagingDirectMaterialBindingsSchemaTokens,
                        USD_IMAGING_DIRECT_MATERIAL_BINDINGS_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--

TfTokenVector UsdImagingDirectMaterialBindingsSchema::GetPurposes()
{
  if (HdContainerDataSourceHandle h = GetContainer()) {
    return h->GetNames();
  }

  return {};
}

UsdImagingDirectMaterialBindingSchema UsdImagingDirectMaterialBindingsSchema::
    GetDirectMaterialBinding()
{
  return GetDirectMaterialBinding(UsdImagingDirectMaterialBindingsSchemaTokens->allPurpose);
}

UsdImagingDirectMaterialBindingSchema UsdImagingDirectMaterialBindingsSchema::
    GetDirectMaterialBinding(const TfToken &purpose)
{
  return UsdImagingDirectMaterialBindingSchema(
      _GetTypedDataSource<HdContainerDataSource>(purpose));
}

// --(END CUSTOM CODE: Schema Methods)--

/*static*/
UsdImagingDirectMaterialBindingsSchema UsdImagingDirectMaterialBindingsSchema::GetFromParent(
    const HdContainerDataSourceHandle &fromParentContainer)
{
  return UsdImagingDirectMaterialBindingsSchema(
      fromParentContainer ?
          HdContainerDataSource::Cast(fromParentContainer->Get(
              UsdImagingDirectMaterialBindingsSchemaTokens->directMaterialBindings)) :
          nullptr);
}

/*static*/
const TfToken &UsdImagingDirectMaterialBindingsSchema::GetSchemaToken()
{
  return UsdImagingDirectMaterialBindingsSchemaTokens->directMaterialBindings;
}

/*static*/
const HdDataSourceLocator &UsdImagingDirectMaterialBindingsSchema::GetDefaultLocator()
{
  static const HdDataSourceLocator locator(GetSchemaToken());
  return locator;
}

PXR_NAMESPACE_CLOSE_SCOPE
